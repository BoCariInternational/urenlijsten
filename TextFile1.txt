using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using CustomControls;

public class PanelUren : Panel
{
    private DataGridView dataGridView1;
    private List<ProjectItem> allProjects;
    
    public PanelUren(List<ProjectItem> projects)
    {
        this.allProjects = projects ?? throw new ArgumentNullException(nameof(projects));
        InitializeComponents();
    }
    
    private void InitializeComponents()
    {
        this.Dock = DockStyle.Fill;
        this.BorderStyle = BorderStyle.FixedSingle;
        
        dataGridView1 = new DataGridView
        {
            Dock = DockStyle.Fill,
            AllowUserToAddRows = false,
            RowCount = 20,
            ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize
        };
        
        AddColumns();
        this.Controls.Add(dataGridView1);
        
        dataGridView1.CellValidating += DataGridView_CellValidating;
        dataGridView1.EditingControlShowing += DataGridView_EditingControlShowing;
        dataGridView1.CellEndEdit += DataGridView_CellEndEdit;
    }
    
    private void AddColumns()
    {
        // Klantnaam
        dataGridView1.Columns.Add(new DataGridViewTextBoxColumn { 
            Name = "Klantnaam", 
            HeaderText = "Klantnaam" 
        });
        
        // Projecttype (CheckboxComboBox filter)
        var typeColumn = new DataGridViewColumn
        {
            Name = "Projecttype",
            HeaderText = "Projecttype",
            CellTemplate = new DataGridViewCheckboxComboBoxCell()
        };
        dataGridView1.Columns.Add(typeColumn);
        
        // Projectnummer (FilteredComboBox)
        var nummerColumn = new DataGridViewColumn
        {
            Name = "Projectnummer",
            HeaderText = "Projectnummer",
            CellTemplate = new DataGridViewFilteredComboBoxCell()
        };
        dataGridView1.Columns.Add(nummerColumn);
        
        // km dienstreis
        dataGridView1.Columns.Add(new DataGridViewTextBoxColumn { 
            Name = "kmDienstreis", 
            HeaderText = "km dienstreis" 
        });
        
        // Dag columns
        string[] days = { "Ma", "Di", "Wo", "Do", "Vr", "Za", "Zo" };
        foreach (var day in days)
        {
            dataGridView1.Columns.Add(new DataGridViewTextBoxColumn { 
                Name = day, 
                HeaderText = day 
            });
        }
        
        // Totaal
        dataGridView1.Columns.Add(new DataGridViewTextBoxColumn { 
            Name = "Totaal", 
            HeaderText = "Totaal", 
            ReadOnly = true 
        });
    }
    
    private void DataGridView_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
        if (dataGridView1.Columns[e.ColumnIndex].Name == "Projecttype")
        {
            dataGridView1.Rows[e.RowIndex].Cells["Projectnummer"].Value = null;
        }
    }
    
    private void DataGridView_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
    {
        string columnName = dataGridView1.Columns[dataGridView1.CurrentCell.ColumnIndex].Name;
        
        if (columnName == "Projecttype" && e.Control is CheckboxComboBox typeCombo)
        {
            // Configureer Projecttype CheckboxComboBox
            var uniqueTypes = allProjects
                .Select(p => new ProjectTypeWrapper(p))
                .DistinctBy(w => w.TypeInt)
                .OrderBy(w => w.TypeInt)
                .ToList();
            
            typeCombo.SetDataSource(uniqueTypes);
            
            // Herstel geselecteerde waarden
            var currentValue = dataGridView1.CurrentCell.Value?.ToString();
            if (!string.IsNullOrEmpty(currentValue))
            {
                var selectedInts = currentValue.Split(',')
                    .Select(int.Parse)
                    .ToList();
                
                typeCombo.SetCheckedItems(selectedInts);
            }
        }
        else if (columnName == "Projectnummer" && e.Control is FilteredComboBox<ProjectItem> nummerCombo)
        {
            // Haal geselecteerde types op
            var typeCell = dataGridView1.CurrentRow.Cells["Projecttype"];
            var selectedTypes = typeCell.Value?.ToString()?
                .Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(int.Parse)
                .ToList() ?? new List<int>();
            
            // Filter projecten op geselecteerde types
            nummerCombo.DataSource = allProjects
                .Where(p => selectedTypes.Contains(p.ProjectTypeInt))
                .OrderBy(p => p.ProjectCode)
                .ToList();
            
            nummerCombo.DisplayMember = "ToString";
            nummerCombo.ValueMember = "ProjectCode";
        }
        
        // Validatie voor dagen en km
        if ((columnName == "Ma" || columnName == "Di" || columnName == "Wo" || 
             columnName == "Do" || columnName == "Vr" || columnName == "Za" || columnName == "Zo") 
            && e.Control is TextBox dayTextBox)
        {
            dayTextBox.KeyPress += (s, ev) =>
            {
                if (!char.IsControl(ev.KeyChar) && !char.IsDigit(ev.KeyChar) && ev.KeyChar != '.')
                {
                    ev.Handled = true;
                    return;
                }
                
                if (ev.KeyChar == '.' && dayTextBox.Text.Contains("."))
                {
                    ev.Handled = true;
                    return;
                }
                
                if (dayTextBox.Text.Contains(".") && 
                    dayTextBox.SelectionStart > dayTextBox.Text.IndexOf('.'))
                {
                    ev.Handled = true;
                }
            };
        }
        
        if (columnName == "kmDienstreis" && e.Control is TextBox kmTextBox)
        {
            kmTextBox.KeyPress += (s, ev) =>
            {
                if (!char.IsControl(ev.KeyChar) && !char.IsDigit(ev.KeyChar))
                {
                    ev.Handled = true;
                }
            };
        }
    }
    
    private void DataGridView_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
    {
        string columnName = dataGridView1.Columns[e.ColumnIndex].Name;
        
        // Validate km dienstreis
        if (columnName == "kmDienstreis" && !string.IsNullOrEmpty(e.FormattedValue?.ToString()))
        {
            if (!int.TryParse(e.FormattedValue.ToString(), out _))
            {
                e.Cancel = true;
                MessageBox.Show("Voer alleen hele getallen in voor km dienstreis.");
            }
        }
        
        // Validate day columns
        if (columnName == "Ma" || columnName == "Di" || columnName == "Wo" || 
            columnName == "Do" || columnName == "Vr" || columnName == "Za" || columnName == "Zo")
        {
            if (!string.IsNullOrEmpty(e.FormattedValue?.ToString()))
            {
                string value = e.FormattedValue.ToString();
                
                if (value.Contains("."))
                {
                    if (!value.EndsWith(".5") || !double.TryParse(value, out _))
                    {
                        e.Cancel = true;
                        MessageBox.Show("Alleen .5 is toegestaan voor halve uren");
                    }
                }
                else if (!int.TryParse(value, out _))
                {
                    e.Cancel = true;
                    MessageBox.Show("Voer alleen cijfers in voor uren");
                }
            }
        }
    }
}

// Helper class voor Projecttype weergave
public class ProjectTypeWrapper : IShortNameable
{
    public int TypeInt { get; }
    public string TypeName { get; }
    
    public ProjectTypeWrapper(ProjectItem project)
    {
        TypeInt = project.ProjectTypeInt;
        TypeName = project.ProjectType;
    }
    
    public string ToString() => TypeName;
    public string ToStringShort() => TypeInt.ToString();
}

// ProjectItem class
public class ProjectItem : IShortNameable
{
    public int ProjectCode { get; set; }
    public string ProjectType { get; set; }
    public int ProjectTypeInt { get; set; }
    public string Description { get; set; }
    
    public string ToString() => $"{ProjectCode} - {Description}";
    public string ToStringShort() => ProjectCode.ToString();
}

// DataGridViewCheckboxComboBoxCell implementatie
public class DataGridViewCheckboxComboBoxCell : DataGridViewTextBoxCell
{
    public override void InitializeEditingControl(int rowIndex, object initialFormattedValue, 
        DataGridViewCellStyle cellStyle)
    {
        base.InitializeEditingControl(rowIndex, initialFormattedValue, cellStyle);
        
        if (DataGridView.EditingControl is CheckboxComboBox combo)
        {
            if (initialFormattedValue != null)
            {
                var selectedInts = initialFormattedValue.ToString()
                    .Split(',')
                    .Select(int.Parse)
                    .ToList();
                
                combo.SetCheckedItems(selectedInts);
            }
        }
    }
    
    public override Type EditType => typeof(CheckboxComboBox);
    public override Type ValueType => typeof(string);
    public override object DefaultNewRowValue => string.Empty;
}

// DataGridViewFilteredComboBoxCell implementatie
public class DataGridViewFilteredComboBoxCell : DataGridViewTextBoxCell
{
    public override void InitializeEditingControl(int rowIndex, object initialFormattedValue, 
        DataGridViewCellStyle cellStyle)
    {
        base.InitializeEditingControl(rowIndex, initialFormattedValue, cellStyle);
        
        if (DataGridView.EditingControl is FilteredComboBox<ProjectItem> combo)
        {
            if (initialFormattedValue != null)
            {
                combo.SelectedValue = initialFormattedValue;
            }
        }
    }
    
    public override Type EditType => typeof(FilteredComboBox<ProjectItem>);
    public override Type ValueType => typeof(int);
    public override object DefaultNewRowValue => null;
}